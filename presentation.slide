# 5 Flavors of mTLS in Kubernetes
We can do it!

Carson Anderson
DevX-O, Weave
@carson_ops

https://github.com/carsonoid/5-flavors-of-mtls-in-kubernetes

## Foundations of TLS

TODO: Diagram of client-server without tls

TODO: Diagram of client-server with TLS

## Why mTLS?

TODO: Diagram of client-server with mTLS

## What are we going to do?

* No TLS
* Manual mTLS
* Cert-Manager mTLS by Hand
* Cert-Manager mTLS via CSI
* mTLS via A Service Mesh





## Basic HTTP Code

## HTTP Server Code

.code cmd/insecure-server/main.go /^func main\(\) \{/,/^\}/

## HTTP Client Code

.code cmd/insecure-client/main.go  /^func main\(\) \{/,/^\}/

## Code Demo

.play cmd/demo/simple.go /START OMIT/,/END OMIT/





## Flavor 0: No TLS

## HTTP Server Deployment

.code mtls/0-none/server-k8s.yaml /^# Deployment/,/# END DEPLOYMENT OMIT/

## HTTP Server Deployment - Args

We can simply run the server process, nothing extra is required

.code mtls/0-none/server-k8s.yaml /START FOCUS OMIT/,/END FOCUS OMIT/

## HTTP Server Service

.code mtls/0-none/server-k8s.yaml /template:$/,/END LABELS OMIT/

.code mtls/0-none/server-k8s.yaml /# Service/,/type: ClusterIP/

## HTTP Client Deployment

.code mtls/0-none/client-k8s.yaml /^# Deployment/,/# END DEPLOYMENT OMIT/

## HTTP Client Deployment - Args

The client just needs to know where the server is. So we can easily point it
at the Kubernetes DNS entry for our server service.

Again, no extra security config here.

.code mtls/0-none/client-k8s.yaml /START FOCUS OMIT/,/END FOCUS OMIT/

## Kubernetes Demo

.play mtls/0-none/present.go /START OMIT/,/END OMIT/

## What happened?

TODO: diagram of how this works in k8s





## mTLS Code Changes

## HTTPS Server Code

First, we need args to tell us where the ca, cert, and key are.

.code cmd/secure-server/main.go /^func main\(\) \{/,/END ARGS OMIT/

## HTTPS Server Code

Now build a cert pool, load the default root certs and add our self-signed

.code cmd/secure-server/main.go /START CA OMIT/,/END CA OMIT/

## HTTPS Server Code

Next, load the keypair and create a tls config.

.code cmd/secure-server/main.go /START TLS OMIT/,/END TLS OMIT/

## HTTPS Server Code

Finally, start the server.

.code cmd/secure-server/main.go /START SERVE OMIT/,/END SERVE OMIT/

## HTTPS Client Code

.code cmd/secure-client/main.go /^func main\(\) \{/,/END CLIENT ARGS OMIT/

## HTTPS Client Code

.code cmd/secure-client/main.go /START CLIENT TLS OMIT/,/END CLIENT TLS OMIT/

## HTTPS Client Code

.code cmd/secure-client/main.go /START CLIENT OMIT/,/END CLIENT OMIT/

## HTTPS Client Code

.code cmd/secure-client/main.go /START CLIENT LOOP OMIT/,/END CLIENT LOOP OMIT/






## Flavor 1: Manual mTLS

## Certificate Generation

One way to manually generate certs is to use CFSSL.

There are many ways to do this
but CFSSL is one of the easiest since it allows for JSON based configuration
and can even be ran as a service.

.link https://github.com/cloudflare/cfssl

## Manual mTLS - Generate CA

.play mtls/1-manual/ca-gen.go /START OMIT/,/END OMIT/

## Manual mTLS - Generate Server Files

.play mtls/1-manual/server-gen.go /START OMIT/,/END OMIT/

## Manual mTLS - Generate Client Files

.play mtls/1-manual/client-gen.go /START OMIT/,/END OMIT/

## Manual mTLS - Generated Files

We can use the find command to walk the cert directory and print all the files we generated

.play mtls/1-manual/summary.go /START OMIT/,/END OMIT/

## Manual mTLS - Local exec demo

.play mtls/1-manual/cmd-demo.go /START OMIT/,/END OMIT/

## Manual mTLS - Kubernetes Server Changes

## Manual mTLS - Volume Mount and Use

Mount a k8s secret (we will create this later) as a volume

.code mtls/1-manual/server-k8s.yaml /START VOL OMIT/,/END VOL OMIT/

.code mtls/1-manual/server-k8s.yaml /START MOUNT OMIT/,/END MOUNT OMIT/

This will result in all the keys in the secret created as files in the `mountPath`. So the args can be updated to:

.code mtls/1-manual/server-k8s.yaml /START ARGS OMIT/,/END ARGS OMIT/

## Manual mTLS - Kubernetes Client Changes

## Manual mTLS - Volume Mount and Use

Basically identical to the Server changes but with a different secret name

.code mtls/1-manual/client-k8s.yaml /START VOL OMIT/,/END VOL OMIT/

.code mtls/1-manual/client-k8s.yaml /START MOUNT OMIT/,/END MOUNT OMIT/

.code mtls/1-manual/client-k8s.yaml /START ARGS OMIT/,/END ARGS OMIT/

## Manual mTLS - Kubernetes Demo

## Manual mTLS - Cluster Setup

Cluster setup is the same as our main demo, but we use a new cluser name to keep things clean

.code mtls/1-manual/k8s-demo.go /START CLUSTER OMIT/,/END CLUSTER OMIT/

## Manual mTLS - Create Secrets

NEW: We have to run commands to create the required secrets for the client and server

.code mtls/1-manual/k8s-demo.go /START CERTS OMIT/,/END CERTS OMIT/

## Manual mTLS - Deployments

Finally, we can create the client and server

.play mtls/1-manual/k8s-demo.go /START RUN OMIT/,/END RUN OMIT/





## Cert-Manager mTLS by Hand

## Cert-Manager mTLS by Hand - Cert-Manger Setup

## Cert-Manager mTLS by Hand - Kubernetes Server Cert Issue





## Flavor 3: Cert-Manager mTLS via CSI





## Flavor 4: mTLS via A Service Mesh

