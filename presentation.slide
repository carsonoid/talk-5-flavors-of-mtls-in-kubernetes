# 5 Flavors of mTLS in Kubernetes
We can do it!

Carson Anderson
DevX-O, Weave
@carson_ops

https://github.com/carsonoid/5-flavors-of-mtls-in-kubernetes

## Foundations of TLS

## Why mTLS?

## How?

## Flavor 0: No TLS

## HTTP Server Code

.code cmd/insecure-server/main.go /^func main\(\) \{/,/^\}/

## HTTP Client Code

.code cmd/insecure-client/main.go  /^func main\(\) \{/,/^\}/

## Code Demo

.code cmd/demo/simple.sh  /START DEMO OMIT/,/END DEMO OMIT/

.play cmd/demo/simple.go /START OMIT/,/END OMIT/

## Flavor 0: No TLS - Kubernetes

## HTTP Server Deployment

.code mtls/0-none/server-k8s.yaml /^# Deployment/,/# END DEPLOYMENT OMIT/

## HTTP Server Deployment - Args

We can simply run the server process, nothing extra is required

.code mtls/0-none/server-k8s.yaml /START FOCUS OMIT/,/END FOCUS OMIT/

## HTTP Server Service

.code mtls/0-none/server-k8s.yaml /template:$/,/END LABELS OMIT/

.code mtls/0-none/server-k8s.yaml /# Service/,/type: ClusterIP/

## HTTP Client Deployment

.code mtls/0-none/client-k8s.yaml /^# Deployment/,/# END DEPLOYMENT OMIT/

## HTTP Client Deployment - Args

The client just needs to know where the server is. So we can easily point it
at the Kubernetes DNS entry for our server service

.code mtls/0-none/client-k8s.yaml /START FOCUS OMIT/,/END FOCUS OMIT/

## Flabor 0: No TLS - Demo

.code mtls/0-none/cluster-up.sh

.play mtls/0-none/present.go /START OMIT/,/END OMIT/

## Flavor 1: Manual mTLS

## Generate Certs

One way to manually generate certs is to use CFSSL.

There are many ways to do this
but CFSSL is one of the easiest since it allows for JSON based configuration
and can even be ran as a service.

## Generate CA

.play mtls/1-manual/ca-gen.go /START OMIT/,/END OMIT/

## Generate Server Files

.play mtls/1-manual/server-gen.go /START OMIT/,/END OMIT/

## Generate Client Files

.play mtls/1-manual/client-gen.go /START OMIT/,/END OMIT/

## Generated Files

.play mtls/1-manual/summary.go /START OMIT/,/END OMIT/

## HTTPS Server Code

First, we need args to tell us where the ca, cert, and key are.

.code cmd/secure-server/main.go /^func main\(\) \{/,/END ARGS OMIT/

## HTTPS Server Code

Now build a cert pool, load the default root certs and add our self-signed

.code cmd/secure-server/main.go /START CA OMIT/,/END CA OMIT/

## HTTPS Server Code

Next, load the keypair and create a tls config.

.code cmd/secure-server/main.go /START TLS OMIT/,/END TLS OMIT/

## HTTPS Server Code

Finally, start the server.

.code cmd/secure-server/main.go /START SERVE OMIT/,/END SERVE OMIT/

## HTTPS Client Code

.code cmd/secure-client/main.go /^func main\(\) \{/,/END CLIENT ARGS OMIT/

## HTTPS Client Code

.code cmd/secure-client/main.go /START CLIENT TLS OMIT/,/END CLIENT TLS OMIT/

## HTTPS Client Code

.code cmd/secure-client/main.go /START CLIENT OMIT/,/END CLIENT OMIT/

## HTTPS Client Code

.code cmd/secure-client/main.go /START CLIENT LOOP OMIT/,/END CLIENT LOOP OMIT/

## Flavor 2: Cert-Manager mTLS by Hand

## Flavor 3: Cert-Manager mTLS via CSI

## Flavor 4: mTLS via A Service Mesh

